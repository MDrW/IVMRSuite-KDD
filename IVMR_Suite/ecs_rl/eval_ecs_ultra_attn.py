"""
VM: cpu, cpu, mem, mem, cpu % 16, cpu % 16  (0 is full, 1 is empty)
PM: cpu, cpu, mem, mem, fragment_rate, cpu % 16, fragment_rate, cpu % 16
cpu % 16 = round(normalized_cpu * 88) % 16 / 16
fragment_rate = round(normalized_cpu * 88) % 16 / round(normalized_cpu * 88)
To rescale memory, mem * 368776
"""

import argparse
import os
import random
import time
from distutils.util import strtobool

import pandas as pd
import wandb

import gym
import numpy as np
import torch
import torch.nn as nn
import torch.optim as optim
from torch.distributions.categorical import Categorical
from tqdm import trange

import gym_reschdule_combination.envs.vm_rescheduler_env

import re
import models
import utils
from env_patch import AsyncVectorEnv_Patch
from main_ecs import make_env, CategoricalMasked
# from ecs_ultra_graph import Agent


class Agent(nn.Module):
    def __init__(self, envs, vm_net, pm_net, params, args_model, detail_pm):
        super(Agent, self).__init__()

        self.vm_net = vm_net
        self.pm_net = pm_net
        self.device = params.device
        self.model = args_model
        self.num_pm = params.num_pm
        self.num_vm = params.num_vm
        self.detail_pm = detail_pm
        self.envs = envs

    def get_value(self, obs_info_pm, obs_info_all_vm, obs_info_edges, obs_info_num_steps, obs_info_num_vms):
        vm_mask = torch.tensor(np.array(self.envs.call_parse('get_vm_dense_mask', id=[1] * args.num_envs)), dtype=torch.bool, device=self.device)
        # num_vms_mask = torch.arange(self.num_vm, device=obs_info_all_vm.device)[None, :] >= obs_info_num_vms[:, None]
        return self.vm_net(obs_info_all_vm, obs_info_num_steps, obs_info_pm, obs_info_edges, vm_mask)[2]

    def get_action_and_value(self, envs, obs_info_pm, obs_info_all_vm, obs_info_edges, obs_info_num_steps,
                             obs_info_num_vms, vm_mask=None, pm_mask=None, selected_vm=None, selected_pm=None):
        if pm_mask is None:
            assert selected_vm is None and selected_pm is None, \
                'action must be None when action_mask is not given!'
        else:
            assert selected_vm is not None and selected_pm is not None, \
                'action must be given when action_mask is given!'
        if vm_mask is None:
            vm_mask = torch.tensor(np.array(envs.call_parse('get_vm_dense_mask', id=[1] * args.num_envs)), dtype=torch.bool, device=self.device)  # pm_mask:  torch.Size([8, 279])

        b_sz = obs_info_pm.shape[0]
        # obs_info_all_vm: torch.Size([8, 2089, 14])
        # obs_info_pm:  torch.Size([8, 279, 8])
        trans_output, vm_logits, critic_score, attn_score = self.vm_net(obs_info_all_vm, obs_info_num_steps,
                                                                        obs_info_pm, obs_info_edges, vm_mask,
                                                                        return_attns=True)
        # vm_pred:  torch.Size([8, 2089])
        # critic_score:  torch.Size([8, 1])
        vm_cat = CategoricalMasked(logits=vm_logits, masks=vm_mask)
        if selected_vm is None:
            # selected_vm = vm_cat.sample()
            selected_vm = torch.argmax(vm_cat.probs, dim=1).long()
        vm_log_prob = vm_cat.log_prob(selected_vm)

        if pm_mask is None:
            pm_mask = torch.tensor(np.array(envs.call_parse('get_pm_mask', item_id=selected_vm.cpu().tolist())),
                                   dtype=torch.bool, device=self.device)  # pm_mask:  torch.Size([8, 279])

        # obs_info_all_vm:  torch.Size([8, 2089, 14])
        # pm_probs = attn_score[-1][torch.arange(b_sz, device=self.device),
        #                           selected_vm + 1 + self.num_pm][:, 1:1+self.num_pm]

        if self.detail_pm:
            pm_embed = trans_output[0][:, 1:]
            vm_embed = trans_output[1][:, :-1]
            pm_attn = attn_score[-1][torch.arange(b_sz, device=self.device), selected_vm][:, 1:]
            pm_logits = self.pm_net(vm_embed[torch.arange(b_sz), selected_vm].unsqueeze(1),
                                    obs_info_all_vm[torch.arange(b_sz), selected_vm].unsqueeze(1), obs_info_num_steps,
                                    obs_info_pm, pm_embed, pm_attn)
        else:
            pm_logits = self.pm_net(obs_info_all_vm[torch.arange(b_sz), selected_vm].unsqueeze(1), obs_info_num_steps,
                                    obs_info_pm)  # b_sz
        pm_cat = CategoricalMasked(logits=pm_logits, masks=pm_mask)
        if selected_pm is None:
            # selected_pm = pm_cat.sample()
            selected_pm = torch.argmax(pm_cat.probs, dim=1).long()
        pm_log_prob = pm_cat.log_prob(selected_pm)  # pm_log_prob:  torch.Size([8])
        log_prob = vm_log_prob + pm_log_prob
        entropy = vm_cat.entropy() + pm_cat.entropy()
        return selected_vm, selected_pm, log_prob, entropy, critic_score, pm_mask, vm_mask


def parse_args():
    # fmt: off
    parser = argparse.ArgumentParser()
    parser.add_argument("--model", type=str, default="attn_graph", help="model architecture")
    parser.add_argument("--restore-name", type=str, required=True, help="restore experiment name")
    parser.add_argument("--restore-file-name", type=str, required=True, help="restore file name")
    parser.add_argument("--pretrain", action='store_true',
                        help="if toggled, we will restore pretrained weights for vm selection")

    parser.add_argument("--gym-id", type=str, default="ecs-v2",
                        help="the id of the gym environment")
    parser.add_argument("--type", type=str, default="type_2",
                        help="the type of test datasets")
    # parser.add_argument("--base-path", type=str, default="/mnt/workspace/DRL-based-VM-Rescheduling/data/nocons_finite_easy", help="ecs data path")
    parser.add_argument("--base-path", type=str, default="/mnt/workspace/workgroup/xuwan/datas/novio_finite_noii_v1", help="ecs data path")
    parser.add_argument("--data-list", type=list, default=['8616'], help="ecs data path")

    parser.add_argument("--vm-data-size", type=str, default="M", choices=["M", "L", "multi", "M_small", "M_medium"],
                        help="size of the dataset")
    parser.add_argument("--max-steps", type=int, default=50, help="maximum number of redeploy steps")
    parser.add_argument("--num-train", type=int, default=4000, help="number of files used for training")
    parser.add_argument("--learning-rate", type=float, default=2.5e-4,
                        help="the learning rate of the optimizer")
    parser.add_argument("--seed", type=int, default=1,
                        help="seed of the experiment")
    parser.add_argument("--torch-deterministic", type=lambda x: bool(strtobool(x)), default=True, nargs="?", const=True,
                        help="if toggled, `torch.backends.cudnn.deterministic=False`")
    parser.add_argument("--normalize", action='store_true',
                        help="if toggled, we will normalize the input features")
    parser.add_argument("--less-feature", action='store_true',
                        help="if toggled, we will use six features for PMs")
    parser.add_argument("--track", action='store_true',
                        help="if toggled, this experiment will be tracked with Weights and Biases")
    parser.add_argument("--debug", action='store_true',
                        help="if toggled, this experiment will save run details")
    parser.add_argument("--no-detail-pm", action='store_true',
                        help="if toggled, we will add pm embeddings and attn score to pm decoder")

    # Algorithm specific arguments
    parser.add_argument("--num-envs", type=int, default=8,
                        help="the number of parallel game environments")
    parser.add_argument("--num-steps", type=int, default=250,
                        help="the number of steps to run in each environment per policy rollout")
    parser.add_argument("--save-json", action='store_true',
                        help="save vm-pm mapping result to json if toggled")
    parser.add_argument("--affinity", type=int, default=0, help="number of conflicts per VM")
    parser.add_argument("--num-minibatches", type=int, default=4, # 4 for original
                        help="the number of mini-batches")
    parser.add_argument("--accum-iter", type=int, default=4,
                        help="number of iterations where gradient is accumulated before the weights are updated;"
                             " used to increase the effective batch size")
    parser.add_argument("--update-epochs", type=int, default=4,
                        help="the K epochs to update the policy")
    parser.add_argument("--norm-adv", type=lambda x: bool(strtobool(x)), default=True, nargs="?", const=True,
                        help="Toggles advantages normalization")
    parser.add_argument("--clip-coef", type=float, default=0.2,
                        help="the surrogate clipping coefficient")
    parser.add_argument("--clip-vloss", type=lambda x: bool(strtobool(x)), default=True, nargs="?", const=True,
                        help="Toggles whether or not to use a clipped loss for the value function, as per the paper.")
    parser.add_argument("--ent-coef", type=float, default=0.005,  # 0.01
                        help="coefficient of the entropy")
    parser.add_argument("--vf-coef", type=float, default=1e-4,  # 1e-4
                        help="coefficient of the value function")
    parser.add_argument("--max-grad-norm", type=float, default=0.5,
                        help="the maximum norm for the gradient clipping")
    parser.add_argument("--target-kl", type=float, default=None,
                        help="the target KL divergence threshold")
    args = parser.parse_args()
    args.detail_pm = not args.no_detail_pm
    args.batch_size = int(args.num_envs * args.num_steps)
    args.minibatch_size = int(args.batch_size // (args.num_minibatches * args.accum_iter))
    return args


def select_datasets_by_type(base_path, data_type='tyep_1'):

    selected_datasets = type_datasets_dict[data_type]    

    print('selected_datasets', selected_datasets)
    
    return selected_datasets


directory = "/mnt/workspace/workgroup/xuwan/datas/novio_finite_noii_v1"

subdirs = [d for d in os.listdir(directory) if os.path.isdir(os.path.join(directory, d))]
# print("all subdirs", subdirs)

type_datasets_dict = {
    "type_all": subdirs,

    "type_new_0": [
        "10167",
        "10848",
        "10881",
        "10898",
        "10954",
        "11344",
        "11367",
        "11529",
        "11834",
        "12055",
        "12541",
        "12571",
        "13006",
        "13324",
        "13651",
        "13658",
        "13659",
        "13665",
        "13680",
        "14045",
        "14047",
        "816938",
        "816941",
        "816942",
        "816946",
        "816948",
        "816949",
        "817006",
        "817011",
        "817015",
        "817020",
        "817021",
        "817026",
        "817027",
        "817038",
        "817061",
        "817062",
        "817072",
        "817076",
        "817079",
        "817083",
        "817094",
        "817103",
        "817726",
        "817727",
        "817730",
        "817733",
        "817800",
        "817807",
        "817808",
        "817829",
        "817832",
        "817837",
        "817855",
        "817862",
        "817864",
        "817866",
        "817870",
        "817873",
        "817874",
        "817879",
        "817894",
        "818430",
        "818433",
        "818453",
        "818469",
        "818472",
        "818474",
        "818476",
        "818479",
        "818483",
        "818513",
        "818514",
        "818517",
        "818518",
        "818520",
        "818524",
        "818528",
        "818582",
        "818593",
        "818595",
        "818598",
        "818603",
        "818604",
        "818616",
        "818617",
        "818618",
        "818626",
        "818644",
        "818647",
        "818653",
        "818654",
        "818659",
        "818660",
        "818662",
        "818663",
        "818667",
        "818672",
        "818914",
        "819259",
        "819260",
        "819261",
        "819262",
        "819269",
        "819307",
        "819309",
        "819311",
        "819365",
        "819366",
        "819369",
        "819370",
        "819371",
        "819376",
        "819377",
        "819379",
        "819409",
        "819418",
        "819459",
        "819460",
        "819461",
        "819971",
        "819975",
        "819977",
        "819978",
        "819981",
        "819982",
        "819983",
        "819984",
        "819987",
        "819988",
        "820037",
        "820038",
        "820042",
        "820050",
        "820090",
        "820097",
        "820102",
        "820103",
        "820110",
        "820114",
        "820116",
        "820119",
        "820132",
        "820624",
        "820833",
        "820837",
        "820841",
        "820842",
        "820894",
        "820899",
        "820901",
        "820902",
        "820903",
        "820905",
        "820913",
        "820914",
        "820950",
        "820957",
        "820958",
        "820963",
        "820968",
        "820969",
        "820970",
        "820971",
        "820991",
        "821514",
        "821517",
        "821518",
        "821522",
        "821574",
        "821576",
        "821578",
        "821584",
        "821588",
        "821589",
        "821606",
        "821622",
        "821637",
        "821638",
        "821643",
        "821647",
        "821650",
        "821658",
        "821670",
        "823364",
        "823439",
        "823444",
        "823468",
        "823528",
        "823529",
        "823530",
        "823531",
        "823533",
        "823534",
        "823535",
        "823552",
        "823592",
        "823593",
        "823595",
        "823596",
        "823599",
        "823600",
        "823601",
        "823608",
        "823647",
        "823648",
        "824352",
        "824357",
        "824384",
        "824438",
        "824439",
        "824441",
        "824449",
        "824452",
        "824461",
        "824513",
        "824519",
        "824526",
        "824531",
        "824532",
        "824541",
        "825316",
        "825319",
        "825324",
        "825328",
        "825415",
        "825423",
        "825425",
        "825426",
        "825427",
        "825497",
        "825507",
        "825510",
        "825512",
        "825514",
        "825518",
        "825521",
        "826265",
        "826266",
        "826267",
        "826344",
        "826346",
        "826348",
        "826355",
        "826397",
        "826407",
        "826409",
        "826410",
        "826414",
        "826415",
        "826418",
        "826422",
        "826425",
        "826428",
        "826429",
        "826430",
        "826435",
        "826475",
        "827378",
        "827379",
        "827383",
        "827384",
        "827443",
        "827469",
        "827524",
        "827528",
        "827535",
        "827536",
        "827563",
        "827590",
        "827644",
        "828199",
        "828200",
        "828201",
        "828203",
        "828212",
        "828217",
        "828292",
        "828298",
        "828303",
        "828308",
        "828309",
        "828310",
        "828355",
        "828356",
        "828373",
        "828375",
        "828386",
        "828388",
        "828390",
        "829013",
        "829015",
        "829101",
        "829102",
        "829104",
        "829108",
        "829110",
        "829111",
        "829112",
        "829158",
        "829159",
        "829165",
        "829175",
        "829176",
        "829179",
        "829180",
        "829583",
        "829584",
        "829613",
        "829614",
        "829618",
        "829653",
        "829655",
        "829658",
        "829763",
        "829764",
        "829769",
        "829770",
        "829858",
        "829859",
        "829860",
        "829861",
        "829862",
        "829863",
        "829866",
        "829870",
        "829893",
        "829949",
        "829954",
        "829955",
        "829956",
        "829957",
        "829959",
        "830712",
        "830758",
        "830763",
        "830771",
        "830786",
        "830811",
        "830821",
        "830823",
        "830832",
        "830875",
        "830880",
        "830894",
        "830908",
        "830927",
        "830930",
        "830994",
        "831067",
        "831088",
        "831116",
        "831138",
        "831152",
        "831194",
        "831196",
        "831198",
        "831200",
        "831309",
        "831330",
        "831332",
        "831336",
        "831340",
        "831341",
        "831428",
        "831430",
        "831431",
        "831432",
        "831439",
        "831442",
        "831443",
        "831448",
        "831451",
        "831497",
        "831499",
        "831519",
        "831538",
        "831544",
        "831556",
        "831584",
        "831609",
        "831663",
        "831748",
        "831760",
        "831762",
        "831783",
        "831785",
        "831791",
        "831800",
        "831802",
        "831906",
        "831919",
        "831930",
        "831955",
        "831967",
        "832025",
        "832037",
        "832100",
        "832108",
        "832299",
        "832385",
        "832412",
        "832469",
        "832478",
        "832479",
        "832480",
        "832481",
        "832490",
        "832545",
        "832554",
        "832556",
        "832560",
        "832566",
        "832570",
        "832576",
        "832827",
        "832958",
        "833062",
        "833128",
        "833186",
        "833229",
        "833415",
        "833416",
        "833502",
        "833505",
        "833506",
        "833510",
        "833511",
        "833512",
        "833513",
        "833517",
        "833522",
        "833525",
        "833579",
        "833582",
        "833586",
        "833589",
        "833591",
        "833594",
        "833608",
        "834210",
        "834675",
        "834784",
        "834786",
        "834787",
        "834796",
        "834867",
        "834872",
        "834882",
        "834884",
        "834885",
        "834887",
        "834888",
        "834889",
        "835353",
        "835522",
        "835574",
        "835794",
        "835795",
        "835848",
        "835851",
        "835858",
        "835860",
        "835913",
        "835914",
        "835926",
        "835928",
        "836400",
        "836434",
        "836467",
        "836490",
        "836600",
        "836603",
        "836609",
        "836719",
        "836721",
        "836722",
        "836727",
        "836735",
        "836793",
        "836796",
        "836797",
        "836799",
        "836802",
        "836810",
        "836811",
        "836815",
        "836825",
        "836828",
        "836830",
        "837376",
        "837399",
        "837481",
        "837482",
        "837484",
        "837485",
        "837490",
        "837503",
        "837504",
        "837549",
        "837552",
        "837556",
        "837581",
        "837584",
        "837655",
        "837657",
        "837658",
        "837679",
        "837688",
        "837710",
        "837719",
        "837752",
        "837756",
        "837757",
        "837759",
        "837763",
        "837825",
        "837885",
        "837901",
        "838142",
        "838154",
        "838168",
        "838178",
        "838263",
        "838275",
        "838315",
        "838322",
        "838370",
        "838374",
        "838391",
        "838392",
        "838399",
        "838400",
        "838442",
        "838447",
        "838471",
        "838491",
        "838493",
        "838519",
        "838523",
        "838527",
        "838539",
        "838564",
        "838569",
        "838576",
        "838614",
        "838680",
        "838708",
        "838791",
        "838798",
        "838800",
        "838805",
        "838806",
        "838809",
        "838812",
        "838829",
        "838833",
        "838908",
        "838910",
        "838914",
        "838940",
        "838985",
        "838993",
        "838994",
        "838995",
        "838998",
        "839003",
        "839009",
        "839011",
        "839012",
        "839016",
        "839017",
        "839057",
        "839144",
        "839587",
        "839634",
        "839643",
        "839654",
        "839670",
        "839674",
        "839709",
        "839732",
        "839792",
        "839845",
        "839904",
        "839905",
        "839908",
        "839913",
        "839931",
        "839980",
        "840013",
        "840014",
        "840015",
        "840022",
        "840091",
        "840101",
        "840104",
        "840105",
        "840106",
        "840110",
        "840118",
        "840188",
        "840443",
        "840563",
        "840586",
        "840648",
        "840679",
        "840700",
        "840739",
        "840773",
        "840820",
        "840833",
        "840854",
        "840862",
        "840873",
        "840899",
        "840962",
        "840979",
        "841075",
        "841077",
        "841081",
        "841170",
        "841174",
        "841177",
        "841178",
        "841180",
        "841181",
        "841192",
        "841253",
        "841263",
        "841265",
        "841268",
        "841272",
        "841274",
        "841284",
        "841287",
        "841291",
        "841330",
        "841549",
        "841617",
        "841687",
        "841754",
        "841783",
        "841845",
        "841850",
        "841858",
        "841932",
        "842142",
        "842419",
        "842420",
        "842515",
        "842516",
        "842519",
        "842527",
        "842528",
        "842594",
        "842605",
        "842612",
        "842614",
        "842618",
        "842660",
        "843103",
        "843244",
        "843328",
        "843494",
        "843497",
        "843501",
        "843503",
        "843504",
        "843508",
        "843509",
        "843512",
        "843619",
        "843624",
        "843625",
        "843632",
        "843634",
        "843676",
        "843688",
        "843689",
        "843694",
        "843697",
        "843705",
        "843708",
        "844517",
        "844531",
        "844628",
        "844629",
        "844632",
        "844634",
        "844635",
        "844643",
        "844644",
        "844707",
        "844712",
        "844716",
        "844717",
        "844724",
        "844727",
        "844728",
        "844729",
        "844739",
        "845529",
        "845593",
        "845599",
        "845602",
        "845605",
        "845688",
        "845690",
        "845691",
        "845692",
        "845694",
        "845695",
        "845696",
        "845700",
        "845738",
        "845741",
        "845755",
        "845761",
        "845764",
        "846730",
        "846734",
        "846735",
        "846736",
        "846752",
        "846753",
        "846758",
        "846762",
        "847674",
        "847677",
        "847708",
        "847710",
        "847711",
        "847715",
        "847719",
        "847737",
        "847747",
        "847750",
        "847752",
        "847756",
        "847757",
        "847759",
        "847792",
        "847796",
        "847797",
        "847800",
        "847808",
        "847826",
        "847828",
        "849583",
        "849587",
        "849596",
        "849600",
        "849624",
        "849625",
        "849716",
        "849721",
        "849730",
        "849798",
        "849802",
        "849803",
        "849808",
        "849811",
        "849813",
        "849817",
        "849830",
        "850674",
        "850675",
        "850681",
        "850689",
        "850755",
        "850810",
        "851661",
        "851679",
        "851684",
        "851687",
        "851694",
        "851696",
        "851774",
        "851787",
        "851839",
        "851847",
        "851861",
        "851862",
        "852888",
        "853004",
        "853062",
        "853067",
        "853068",
        "853069",
        "853072",
        "853081",
        "853084",
        "853120",
        "853121",
        "853124",
        "853129",
        "853132",
        "853727",
        "854349",
        "854352",
        "854353",
        "854356",
        "854357",
        "854360",
        "854418",
        "854422",
        "854426",
        "854428",
        "854460",
        "854462",
        "854468",
        "854471",
        "854472",
        "854475",
        "854483",
        "854485",
        "855071",
        "855131",
        "855209",
        "855263",
        "855312",
        "855365",
        "855370",
        "855371",
        "855373",
        "855374",
        "855383",
        "855385",
        "855398",
        "855412",
        "855453",
        "855474",
        "855477",
        "855503",
        "855536",
        "855537",
        "855540",
        "855541",
        "855546",
        "855550",
        "855572",
        "855590",
        "855594",
        "855654",
        "855813",
        "855889",
        "855937",
        "856001",
        "856070",
        "856132",
        "856195",
        "856234",
        "856247",
        "856259",
        "856264",
        "856276",
        "856297",
        "856307",
        "856327",
        "856335",
        "856353",
        "856382",
        "856414",
        "856423",
        "856424",
        "856425",
        "856426",
        "856427",
        "856428",
        "856429",
        "856431",
        "856433",
        "856434",
        "856435",
        "856436",
        "856437",
        "856438",
        "856440",
        "856446",
        "856450",
        "856451",
        "856452",
        "856453",
        "856455",
        "856456",
        "856457",
        "856458",
        "856551",
        "856600",
        "856642",
        "856643",
        "856649",
        "856651",
        "856658",
        "856662",
        "856666",
        "856667",
        "856672",
        "856675",
        "856677",
        "857315",
        "857327",
        "857353",
        "857611",
        "857615",
        "857617",
        "857621",
        "857674",
        "857679",
        "857681",
        "857686",
        "857687",
        "857692",
        "857694",
        "857733",
        "857736",
        "857737",
        "857738",
        "857742",
        "857745",
        "857844",
        "858164",
        "858266",
        "858528",
        "858607",
        "858729",
        "858730",
        "858734",
        "858740",
        "858749",
        "858795",
        "858798",
        "858799",
        "858837",
        "858840",
        "858841",
        "858855",
        "858859",
        "858867",
        "858871",
        "858881",
        "858882",
        "858885",
        "8616",
        "8660",
        "8700",
        "8767",
        "8858",
        "8971",
        "9002",
        "9094"
    ],
    "type_new_1": [
        "817073",
        "817078",
        "817683",
        "817686",
        "817687",
        "817731",
        "817806",
        "817836",
        "817861",
        "817868",
        "818516",
        "818649",
        "818650",
        "819305",
        "819411",
        "820041",
        "820044",
        "820099",
        "820112",
        "820835",
        "820843",
        "820912",
        "820964",
        "820966",
        "821580",
        "821629",
        "823437",
        "823561",
        "823590",
        "824355",
        "824360",
        "824435",
        "824451",
        "824517",
        "824527",
        "825420",
        "825437",
        "825501",
        "826372",
        "826408",
        "826411",
        "826412",
        "826417",
        "826431",
        "827400",
        "827472",
        "827478",
        "827500",
        "827533",
        "827662",
        "828205",
        "828293",
        "828299",
        "828357",
        "828358",
        "828377",
        "829597",
        "829681",
        "829746",
        "829771",
        "829790",
        "829869",
        "830759",
        "830812",
        "830819",
        "830822",
        "830914",
        "830925",
        "830997",
        "831017",
        "831068",
        "831083",
        "831105",
        "831137",
        "831172",
        "831192",
        "831202",
        "831229",
        "831246",
        "831288",
        "831304",
        "831343",
        "831354",
        "831367",
        "831400",
        "831419",
        "831426",
        "831444",
        "831496",
        "831517",
        "831558",
        "831572",
        "831607",
        "831660",
        "831747",
        "831761",
        "831784",
        "831799",
        "831828",
        "831845",
        "831873",
        "831889",
        "831918",
        "831929",
        "831954",
        "831969",
        "831990",
        "832002",
        "832024",
        "832039",
        "832055",
        "832060",
        "832073",
        "832487",
        "833516",
        "833524",
        "833580",
        "833611",
        "834208",
        "834308",
        "834420",
        "834520",
        "834541",
        "834584",
        "834674",
        "834785",
        "834807",
        "834998",
        "835234",
        "835354",
        "835436",
        "835481",
        "835523",
        "835542",
        "835796",
        "835870",
        "836401",
        "836432",
        "836453",
        "836456",
        "836503",
        "836525",
        "836614",
        "836678",
        "836767",
        "836803",
        "836818",
        "836885",
        "836958",
        "837125",
        "837148",
        "837267",
        "837381",
        "837410",
        "837416",
        "837424",
        "837432",
        "837437",
        "837456",
        "837457",
        "837459",
        "837460",
        "837469",
        "837470",
        "837476",
        "837486",
        "837489",
        "837494",
        "837497",
        "837505",
        "837507",
        "837524",
        "837572",
        "837589",
        "837616",
        "837654",
        "837713",
        "837725",
        "837737",
        "837749",
        "837827",
        "837829",
        "837907",
        "837922",
        "837963",
        "838159",
        "838174",
        "838233",
        "838282",
        "838367",
        "838377",
        "838411",
        "838478",
        "838494",
        "838504",
        "838520",
        "838533",
        "838548",
        "838565",
        "838572",
        "838581",
        "838588",
        "838612",
        "838617",
        "838619",
        "838700",
        "838712",
        "838744",
        "838808",
        "838835",
        "838902",
        "838921",
        "838981",
        "839004",
        "839013",
        "839168",
        "839286",
        "839421",
        "839536",
        "839550",
        "839574",
        "839575",
        "839579",
        "839606",
        "839651",
        "839661",
        "839675",
        "839681",
        "839716",
        "839784",
        "839819",
        "839848",
        "839878",
        "839907",
        "839969",
        "840016",
        "840026",
        "840197",
        "840222",
        "840230",
        "840299",
        "840482",
        "840520",
        "840589",
        "840637",
        "840677",
        "840702",
        "840720",
        "840796",
        "840823",
        "840839",
        "840841",
        "840845",
        "840863",
        "840867",
        "840880",
        "840908",
        "840917",
        "841082",
        "841084",
        "841151",
        "841191",
        "841270",
        "841271",
        "842141",
        "842260",
        "842270",
        "842339",
        "842383",
        "842423",
        "842509",
        "842530",
        "842543",
        "842592",
        "842635",
        "842909",
        "843041",
        "843150",
        "843241",
        "843252",
        "843256",
        "843310",
        "843331",
        "843348",
        "843364",
        "843371",
        "843372",
        "843392",
        "843477",
        "843631",
        "843644",
        "843683",
        "843702",
        "843706",
        "843807",
        "843904",
        "844026",
        "844135",
        "844182",
        "844218",
        "844261",
        "844319",
        "844366",
        "844378",
        "844382",
        "844456",
        "844586",
        "844638",
        "844642",
        "844656",
        "844710",
        "844774",
        "844908",
        "844976",
        "845100",
        "845124",
        "845239",
        "845331",
        "845334",
        "845337",
        "845343",
        "845435",
        "845451",
        "845454",
        "845472",
        "845488",
        "845490",
        "845516",
        "845520",
        "845558",
        "845559",
        "845618",
        "845670",
        "845708",
        "845725",
        "845742",
        "845745",
        "845748",
        "845749",
        "845750",
        "845774",
        "845788",
        "845810",
        "845920",
        "846016",
        "846055",
        "846071",
        "846102",
        "846118",
        "846139",
        "846182",
        "846194",
        "846229",
        "846236",
        "846275",
        "846279",
        "846309",
        "846323",
        "846352",
        "846371",
        "846384",
        "846408",
        "846411",
        "846498",
        "846505",
        "846510",
        "846514",
        "846515",
        "846518",
        "846521",
        "846524",
        "846526",
        "846527",
        "846553",
        "846555",
        "846564",
        "846565",
        "846640",
        "846642",
        "846746",
        "846748",
        "846779",
        "846780",
        "847009",
        "847015",
        "847074",
        "847076",
        "847122",
        "847125",
        "847153",
        "847155",
        "847214",
        "847230",
        "847297",
        "847299",
        "847355",
        "847361",
        "847362",
        "847378",
        "847426",
        "847433",
        "847448",
        "847450",
        "847454",
        "847461",
        "847463",
        "847464",
        "847472",
        "847473",
        "847489",
        "847495",
        "847536",
        "847537",
        "847573",
        "847633",
        "847634",
        "847697",
        "847706",
        "847739",
        "847754",
        "847755",
        "847763",
        "847801",
        "847815",
        "847827",
        "847839",
        "847842",
        "848028",
        "848033",
        "848057",
        "848058",
        "848132",
        "848134",
        "848205",
        "848207",
        "848217",
        "848220",
        "848262",
        "848263",
        "848294",
        "848295",
        "848339",
        "848342",
        "848376",
        "848378",
        "848401",
        "848439",
        "848440",
        "848449",
        "848450",
        "848451",
        "848453",
        "848454",
        "848455",
        "848457",
        "848458",
        "848459",
        "848460",
        "848488",
        "848508",
        "848509",
        "848562",
        "848563",
        "848576",
        "848577",
        "848651",
        "848652",
        "848764",
        "848765",
        "848803",
        "848806",
        "848884",
        "848886",
        "848916",
        "848917",
        "848955",
        "848957",
        "849070",
        "849130",
        "849230",
        "849231",
        "849250",
        "849259",
        "849296",
        "849373",
        "849384",
        "849599",
        "849605",
        "849800",
        "849806",
        "849807",
        "850684",
        "851668",
        "851677",
        "851697",
        "851704",
        "852760",
        "852815",
        "852889",
        "852927",
        "853061",
        "853085",
        "853141",
        "854419",
        "854466",
        "854467",
        "855545",
        "856653",
        "856660",
        "856676",
        "858208",
        "858658",
        "858739",
        "858800",
        "858862",
        "858863",
        "858873"
    ],
    "type_new_2": [
        "817012",
        "817017",
        "817734",
        "817835",
        "817875",
        "817877",
        "818463",
        "818468",
        "818471",
        "818535",
        "818642",
        "818645",
        "818655",
        "819312",
        "819980",
        "820049",
        "820107",
        "820108",
        "820115",
        "820606",
        "820896",
        "820972",
        "820975",
        "821435",
        "821516",
        "821524",
        "821642",
        "823440",
        "823445",
        "823635",
        "824437",
        "824448",
        "824534",
        "824536",
        "825230",
        "825246",
        "825305",
        "825499",
        "825508",
        "826351",
        "826426",
        "826457",
        "827381",
        "828304",
        "828383",
        "828385",
        "829016",
        "829017",
        "829773",
        "831207",
        "831345",
        "831433",
        "831851",
        "832079",
        "832250",
        "832491",
        "832565",
        "833413",
        "833418",
        "833598",
        "834517",
        "834552",
        "834565",
        "834644",
        "834758",
        "834959",
        "835209",
        "835326",
        "835415",
        "835478",
        "835516",
        "835585",
        "835639",
        "835727",
        "835805",
        "835918",
        "836092",
        "836179",
        "836313",
        "836344",
        "836392",
        "836424",
        "836427",
        "836439",
        "836538",
        "836601",
        "836691",
        "836730",
        "836918",
        "837282",
        "837406",
        "837434",
        "839015",
        "840094",
        "840117",
        "841970",
        "841983",
        "842133",
        "842486",
        "842508",
        "842958",
        "843059",
        "843078",
        "843185",
        "843243",
        "843255",
        "843261",
        "843315",
        "843510",
        "843692",
        "844315",
        "844322",
        "844331",
        "844522",
        "844530",
        "845449",
        "845452",
        "845466",
        "845473",
        "845491",
        "845510",
        "845562",
        "846507",
        "846516",
        "846519",
        "846554",
        "846582",
        "846622",
        "846687",
        "846716",
        "846759",
        "846821",
        "846841",
        "847060",
        "847683",
        "849602",
        "849805",
        "849825",
        "850686",
        "851873",
        "853060",
        "854108",
        "854206",
        "854219",
        "854270",
        "854434",
        "854478",
        "854482",
        "854727",
        "855553",
        "856227",
        "856342",
        "856670",
        "857354",
        "857462",
        "857538",
        "857654",
        "857670",
        "858741",
        "858803",
        "858877",
        "859444",
        "859499"
    ],

    "type_new": [
        "10839",
        "10875",
        "10908",
        "10931",
        "11349",
        "11368",
        "11509",
        "11778",
        "11833",
        "12027",
        "12067",
        "12553",
        "12574",
        "13010",
        "13317",
        "13650",
        "13675",
        "13691",
        "13710",
        "13727",
        "13741",
        "14061",
        "14133",
        "14172",
        "14206",
        "14236",
        "14328",
        "14370",
        "14409",
        "14494",
        "14614",
        "14633",
        "14642",
        "821464",
        "8621",
        "8674",
        "8706",
        "8780",
        "8828",
        "8832",
        "8855",
        "8975",
        "8994",
        "9075"
    ],
    "type_1": ['10003', '10027', '10056', '10065', '10104', '10112', '10135', '10140', '10187', '10506', '10752', '10784', '10809', '10839', '10875', '10908', '10931', '11349', '11368', '11509', '11778', '11833', '12027', '12067', '12553', '12574', '13010', '13317', '13650', '13675', '13691', '13710', '13727', '13741', '14061', '14133', '14172', '14206', '14236', '14328', '14370', '14409', '14494', '14614', '14633', '14642', '821464', '8621', '8674', '8706', '8780', '8828', '8832', '8855', '8975', '8994', '9075'],
    # "type_2": ['10002', '10016', '10022', '10023', '10031', '10036', '10057', '10058', '10062', '10086', '10095', '10114', '10124', '10156', '10158', '10167', '10177', '10221', '10514', '10726', '10778', '10813', '10848', '10881', '10898', '10954', '11344', '11367', '11529', '11834', '12055', '12541', '12571', '13006', '13324', '13651', '13658', '13659', '13665', '13680', '14045', '820624', '8616', '8660', '8700', '8767', '8858', '8971', '9002', '9094', '9938'],
    # "type_2": ["10221", "14045", "13665", "10177", "10167", "11367", "10095", "11344", "13680", "10058", "12055", "10057", "12571", "820624", "11834", "13651", "12541", "13659", "13658", "9094", "10062", "8971", "9002", "10086", "10898", "11529"],
    "type_2": [
        "826417", 
        "839000", 
        "843690", 
        "847811", 
        "851838"
    ],
    "type_3": ['821576', '824526', '828295', '831438', '840008', '843693', '847814', '849322', '849342', '858279', '858285', '858303', '858408', '858493', '858534', '858588'],
    "type_4": ['841935', '842308', '842479', '842697', '843112', '843213', '844254', '844308', '844320', '844357', '845479', '845528', '845633', '845983', '846083', '846175', '846340', '846412', '846513', '846525', '846621', '846803', '847043', '847216', '847275', '847393', '847453', '847462', '847476', '856897'],
    # "type_5": ['819257', '821575', '824520', '828209', '831327', '834875', '838811', '842511', '845746', '849621', '853064'],
    # "type_5": ["817802", "820098", "823527", "826474", "829854", "833583"], # added in 11/18
    "type_5": [
        "832472", 
        "840006", 
        "843701", 
        "847735"
    ],
    # "type_6": ['817879', '820978', '824541', '828390', '832572', '836830', '841291', '845764', '849830', '854485', '858885'],
    "type_6": [
        "819402",
        "826440",
        "829957",
        "834889",
        "839017",
        "847828"
    ],
    # "type_7": ['817078', '820112', '823603', '839907', '843702', '852760', '852815', '852889', '852927', '853141'],
    "type_7": [
        "819257",
        "821575",
        "824520",
        "828209",
        "831327",
        "834875",
        "838811",
        "842511",
        "845746",
        "849621",
        "853064"
    ],
    # "type_8": ['823534', '824441', '825425', '826348', '827383', '828298', '829108', '829861', '831332', '832479', '833517', '834786', '836609', '837657', '838812', '839913', '841180', '842516', '843509', '844531', '845602', '846758', '847708', '857621', '858740'],
    "type_8": [
        "819305",
        "821629",
        "825420",
        "828357",
        "840011",
        "843677",
        "847754"
    ],
    "type_9": ['817807', '820102', '823530', '826414', '829863', '833586', '837759', '841265', '845695', '849721', '853124', '857687'],
    "type_10": ['818433', '818453', '818469', '818472', '818474', '818476', '818479', '818483', '818582', '818914', '824513', '828309'],
    "type_11": [
        "820107",
        "823440",
        "826457",
        "829767"
    ],
    "type_12": [
        "818645",
        "821521",
        "824437",
        "836605",
        "840003",
        "843678",
        "847675"
    ],
    "type_13": [
        "818535",
        "820896",
        "823635",
        "827381"
    ],
    "type_14": [
        "818596",
        "820955",
        "824442",
        "827526"
    ]
    }
    
    
if __name__ == "__main__":
    args = parse_args()
    if args.gym_id == "ecs-v2":
        args.base_path = "/mnt/workspace/workgroup/xuwan/datas/novio_finite_noii_v1"
        args.data_list = select_datasets_by_type(args.base_path, data_type=args.type)

    results = {
    'dataset_id': [], 
    'rl_score': [], 
    'rl_rewards': [], 
    'greedy_score': [], 
    'greedy_rewards': [], 
    'base_score': [], 
    'base_rewards': [], 
    'evaluation_time': []
    }
    args.num_envs = 1
    args.seed = 1
    num_envs = args.num_envs
    run_name = f'{args.restore_name}'
    np.set_printoptions(precision=4)
    np.set_printoptions(suppress=True)
    torch.backends.cudnn.benchmark = True
    torch.set_default_dtype(torch.float32)


    # TRY NOT TO MODIFY: seeding
    random.seed(args.seed)
    np.random.seed(args.seed)
    torch.manual_seed(args.seed)
    torch.backends.cudnn.deterministic = args.torch_deterministic

    device = torch.device("cuda:7" if torch.cuda.is_available() else "cpu")
    
    # env setup
    envs = AsyncVectorEnv_Patch(
            [make_env(args.gym_id, args.seed, args.data_list, mode='test') for i in range(num_envs)]
        )

    args.num_steps = envs.env_fns[0]().configs['maxMigration'] * 2
    num_steps = args.num_steps
    args.batch_size = int(args.num_envs * args.num_steps) // 2
    args.minibatch_size = int(args.batch_size // (args.num_minibatches * args.accum_iter))

    params = utils.Params(f'./experiments/pretrain/{args.model}/params.json')
    params.update('./data/params.json')
    params.device = device
    params.batch_size = args.num_envs
    params.accum_iter = args.accum_iter


    params.num_vm = envs.num_items
    params.num_pm = envs.num_boxes

    # input the vm candidate model
    vm_cand_model = models.VM_Extra_Sparse_Attn_Wrapper(params, args.pretrain).model
    pm_cand_model = models.PM_Detail_Attn_Wrapper(params).model

    agent = Agent(envs, vm_cand_model, pm_cand_model, params, args.model,
                  args.detail_pm)
    optim = optim.Adam(agent.parameters(), lr=args.learning_rate, eps=1e-5)
    agent.eval()
    global_step, agent = utils.load_checkpoint(args.restore_name, args.restore_file_name, agent)
    print(f"- Restored file (global step {global_step}) "
          f"from {os.path.join(args.restore_name, args.restore_file_name + '.pth.tar')}")

    if args.track:
        wandb.watch(agent, log_freq=100)

    # ALGO Logic: Storage setup
    obs_vm = torch.zeros(num_steps, args.num_envs, params.num_vm, params.vm_cov, device=device)
    obs_pm = torch.zeros(num_steps, args.num_envs, params.num_pm, params.pm_cov, device=device)
    obs_num_steps = torch.zeros(num_steps, args.num_envs, 1, 1, device=device)
    obs_num_vms = torch.zeros(num_steps, args.num_envs, dtype=torch.int32, device=device)
    obs_edges = torch.zeros(num_steps, num_envs, params.num_vm + params.num_pm, 1, dtype=torch.int32, device=device)
    vm_actions = torch.zeros(num_steps, args.num_envs, device=device)
    pm_actions = torch.zeros(num_steps, args.num_envs, device=device)
    logprobs = torch.zeros(num_steps, args.num_envs, device=device)
    rewards = torch.zeros(num_steps, args.num_envs, device=device)
    dones = torch.zeros(num_steps, args.num_envs, device=device)
    values = torch.zeros(num_steps, args.num_envs, device=device)
    # envs.single_action_space.nvec: [2089, 279] (#vm, #pm)
    action_masks = torch.zeros(num_steps, args.num_envs, envs.single_action_space.nvec[1], dtype=torch.bool,
                               device=device)

    
    with torch.no_grad():
        
        test_dataset_type = args.type
        for file_index in range(len(type_datasets_dict[test_dataset_type])):
            start_time = time.time() 
            envs.call_parse('set_current_env', env_id=[file_index] * args.num_envs)
            results['dataset_id'].append(type_datasets_dict[test_dataset_type][file_index]) 

            current_ep_score = []
            current_ep_rewards = []

            greedy_log_path = f'/mnt/workspace/DRL-based-VM-Rescheduling/baselines/greedy_nocons_finite_easy/{type_datasets_dict[test_dataset_type][file_index]}.log'
            greedy_reward = None
            greedy_score = None

            base_log_path = f'/mnt/workspace/DRL-based-VM-Rescheduling/baselines/nocons_finite_easy/{type_datasets_dict[test_dataset_type][file_index]}.log'
            base_reward = None
            base_score = None

            reward_pattern = r'Migration Cost:\s*([-+]?\d*\.\d+|\d+)'
            score_pattern = r'Finish Score:\s*([-+]?\d*\.\d+|\d+)'

            base_reward_pattern = r'Total Reward:\s*([-+]?\d*\.\d+|\d+)'
            base_score_pattern = r'Final Score: \s*([-+]?\d*\.\d+|\d+)'

            if os.path.exists(greedy_log_path):
                with open(greedy_log_path, 'r') as log_file:
                    for line in log_file:
                        reward_match = re.search(reward_pattern, line)
                        if reward_match:
                            greedy_reward = float(reward_match.group(1))
                        
                        score_match = re.search(score_pattern, line)
                        if score_match:
                            greedy_score = float(score_match.group(1))

            results['greedy_rewards'].append(greedy_reward if greedy_reward is not None else 0)  
            results['greedy_score'].append(greedy_score if greedy_score is not None else 0) 

            if os.path.exists(base_log_path):
                with open(base_log_path, 'r') as log_file:
                    for line in log_file:
                        reward_match = re.search(base_reward_pattern, line)
                        if reward_match:
                            base_reward = float(reward_match.group(1))
                        
                        score_match = re.search(base_score_pattern, line)
                        if score_match:
                            base_score = float(score_match.group(1))

            results['base_rewards'].append(base_reward if base_reward is not None else 0)  
            results['base_score'].append(base_score if base_score is not None else 0) 

            current_ep_info = np.zeros((num_steps, args.num_envs, 2)) - 1000  # return, len, fr
            next_obs_dict = envs.reset()
            next_obs_pm = torch.tensor(next_obs_dict['pm_info'], device=device)  # torch.Size([8, 279, 8])
            next_obs_vm = torch.tensor(next_obs_dict['vm_info'], device=device)  # torch.Size([8, 279, 14])
            next_obs_num_steps = torch.Tensor(next_obs_dict['num_steps']).to(device)
            next_obs_edges = torch.tensor(next_obs_dict['edges'], dtype=torch.int32, device=device)
            next_obs_num_vms = torch.tensor(next_obs_dict['num_vms'], dtype=torch.int32, device=device)
            next_done = torch.zeros(args.num_envs, device=device)

            for step in range(0, num_steps):

                obs_pm[step] = next_obs_pm
                obs_vm[step] = next_obs_vm
                obs_num_steps[step] = next_obs_num_steps
                obs_num_vms[step] = next_obs_num_vms
                obs_edges[step] = next_obs_edges
                dones[step] = next_done

                vm_action, pm_action, logprob, _, value, action_mask, _ \
                    = agent.get_action_and_value(envs, next_obs_pm, next_obs_vm, next_obs_edges,
                                                 next_obs_num_steps, next_obs_num_vms)
                values[step] = value.flatten()  # value:  torch.Size([8, 1])
                action_masks[step] = action_mask
                vm_actions[step] = vm_action
                pm_actions[step] = pm_action
                logprobs[step] = logprob

                # print(f'vm_action: {vm_action.cpu().numpy()}, pm_action: {pm_action.cpu().numpy()}')
                next_obs_dict, reward, done, info = envs.step(torch.stack([vm_action, pm_action],
                                                                          dim=-1).cpu().numpy())
                next_obs_pm = torch.Tensor(next_obs_dict['pm_info']).to(device)
                next_obs_vm = torch.Tensor(next_obs_dict['vm_info']).to(device)

                next_obs_num_steps = torch.Tensor(next_obs_dict['num_steps']).to(device)
                next_obs_num_vms = torch.tensor(next_obs_dict['num_vms'], dtype=torch.int32, device=device)
                next_obs_edges = torch.tensor(next_obs_dict['edges'], dtype=torch.int32, device=device)
                rewards[step] = torch.tensor(reward, device=device).view(-1)
                next_done = torch.Tensor(done).to(device)

                for env_id, item in enumerate(info):
                    if "episode" in item.keys():
                        current_ep_info[step, env_id, 0] = item["episode"]["r"]
                    if done[env_id]:
                        current_ep_score.append(item["done_score"])
                        current_ep_rewards.append(item["done_rewards"])
                        
                        print(f"[Test]: env-id {env_id} is done! run {item['move_count']} steps, done score:{item['done_score']}, done rewards:{item['done_rewards']}")
                if np.any(done):
                    break

            avg_current_ep_score = np.mean(np.array(current_ep_score))
            avg_current_ep_rewards = np.mean(np.array(current_ep_rewards))

            no_end_mask = current_ep_info[:, :, 0] != -1000
            current_ep_return = current_ep_info[:, :, 0][no_end_mask]
            results['rl_rewards'].append(avg_current_ep_rewards)
            results['rl_score'].append(avg_current_ep_score)

            # print(f"[SCORE] greedy: {greedy_score} | rl: {np.mean(all_test_score)} | base: {base_score}")

            end_time = time.time() 
            evaluation_time = end_time - start_time 
            results['evaluation_time'].append(evaluation_time)

        df_results = pd.DataFrame(results)

        csv_filename = f"./test_all_metrics_{args.gym_id}_{args.type}_{args.model}_{args.seed}" \
           f"_{utils.name_with_datetime().replace(' ', '_').replace(':', '_').replace('-', '_')}.csv"
        df_results.to_csv(csv_filename, index=False)
        print(f"Results saved to {csv_filename}")

    envs.close()